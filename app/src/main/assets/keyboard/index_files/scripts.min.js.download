/*!
 * Copyright (C) Cymath LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 */
;
var g_cursor_pos = 0;
var g_last_div_pos_in_pixel = 0;
var g_input_text = "";
var g_q_elem;
var g_timeout;
var g_is_first_keypress = true;
var g_button_trigger_event = g_mobile_or_tablet ? "touchstart" : "click";
var g_half_char_div_width = 5;
var g_check_answer_on = false;
var g_debounce_limit_in_ms = 250;
var g_autocomplete_max_num_items_desktop = 5;
var g_autocomplete_max_num_items_mobile = 3;
var g_upper = false;
var g_default_num_rows = 2;
var g_last_exec = 0;
var g_123_not_abc = true;
var g_showing_examples = false;
var g_drawer_closed = true;
var g_long_delimiter = "<DELIMITER>";
var g_ui_delay = 200;
var g_min_num_steps_to_show_ad = 8;
var g_topic = "";
var g_delete_mode = false;
var g_get_steps_script_name = "get_steps.php";
var g_autocomp_methods = [{
    type: "method",
    name: "Asymptotes ",
    desc: label("find_the_vertical_horizontal_and"),
    snippet: "y=\\frac{{x}^{2}}{x+8}",
    examples: ["Asymptotes y=x^2/(x+8)", "Asymptotes y=1/x"]
}, {
    type: "method",
    name: "Complete the square ",
    desc: label("convert_to_the_form_ax_h2_k"),
    snippet: "3{x}^{2}+5x",
    examples: ["Complete the square 3x^2+5x", "Complete the square x^2+2x"]
}, {
    type: "method",
    name: "? degree to radian",
    desc: label("convert_degree_to_radian"),
    snippet: "180",
    examples: ["180 degree to radian", "90 degree to radian"]
}, {
    type: "method",
    name: "Differentiate ",
    desc: label("find_the_derivative"),
    snippet: "\\cos(x)^4",
    examples: ["Differentiate cos(x)^4", "Differentiate x^5/y for x"]
}, {
    type: "method",
    name: "Domain ",
    desc: label("find_the_domain_of_a"),
    snippet: "y=\\frac{2}{x}",
    examples: ["Domain y=2/x", "Domain y=sqrt(x-3)"]
}, {
    type: "method",
    name: "Evaluate ",
    desc: label("evaluate_an_expression_with_variables"),
    snippet: "3x+8,x=9",
    examples: ["Evaluate 3x+8 for x=9", "Evaluate 4y+x for y=2,x=3"]
}, {
    type: "method",
    name: "Expand ",
    desc: label("expand_an_expression_includes_foil"),
    snippet: "y(y+2)",
    examples: ["Expand y(y+2)", "Expand (x+3)(x+2)"]
}, {
    type: "method",
    name: "Factor ",
    desc: label("factor_an_expression_by_grouping"),
    snippet: "{y}^{3}+2y",
    examples: ["Factor y^3+2y", "Factor x^2+5x+6"]
}, {
    type: "method",
    name: "GCF ",
    desc: label("find_the_greatest_common_factor"),
    snippet: "24,36",
    examples: ["GCF 24 36", "GCF 5 15 30"]
}, {
    type: "method",
    name: "Graph ",
    desc: label("plot_a_function"),
    snippet: "y={x}^{2}",
    examples: ["Graph y=x^2", "Graph y=sin(x)+3"]
}, {
    type: "method",
    name: "Integrate ",
    desc: label("find_the_integral"),
    snippet: "\\sin(x)^3",
    examples: ["Integrate sin(x)^3", "Integrate 3x^4+y for x"]
}, {
    type: "method",
    name: "Intercepts ",
    desc: label("find_the_xintercept_and_yintercept"),
    snippet: "y={x}^{2}+3",
    examples: ["Intercepts y=x^2+3", "Intercepts y=x+5"]
}, {
    type: "method",
    name: "LCM ",
    desc: label("find_the_least_common_multiple"),
    snippet: "8,12",
    examples: ["LCM 8 12", "LCM 5 15 30"]
}, {
    type: "method",
    name: "Long addition ",
    desc: "Add two numbers using a manual procedure.",
    snippet: "193+89",
    examples: ["193 + 89", "159 + 612"]
}, {
    type: "method",
    name: "Long division ",
    desc: "Divide two numbers using a manual procedure.",
    snippet: "17\\div3",
    examples: ["17 รท 3", "250 รท 30"]
}, {
    type: "method",
    name: "Long multiplication ",
    desc: "Multiply two numbers using a manual procedure.",
    snippet: "12\\times14",
    examples: ["12 * 14", "3.14 * 5"]
}, {
    type: "method",
    name: "Long subtraction ",
    desc: "Subtract two numbers using a manual procedure.",
    snippet: "121-72",
    examples: ["121 - 72", "91 - 39"]
}, {
    type: "method",
    name: "Partial fraction ",
    desc: label("apply_partial_fraction_decomposition"),
    snippet: "\\frac{2x-3}{{x}^{3}+x}",
    examples: ["Partial fraction (2x-3)/(x^3+x)", "Partial fraction u/(1+u)^2"]
}, {
    type: "method",
    name: "Polynomial division ",
    desc: label("apply_polynomial_long_division"),
    snippet: "\\frac{{x}^{3}-1}{x+2}",
    examples: ["Polynomial division (x^3-1)/(x+2)", "Polynomial division (x^2+2x-7)/(x-2)"]
}, {
    type: "method",
    name: "Prime factorization ",
    desc: label("apply_prime_factorization_to_a"),
    snippet: "72",
    examples: ["Prime factorization 72", "Prime factorization 436"]
}, {
    type: "method",
    name: "? radian to degree",
    desc: label("convert_radian_to_degree"),
    snippet: "PI/2",
    examples: ["PI/2 radian to degree", "3PI radian to degree"]
}, {
    type: "method",
    name: "Range ",
    desc: label("find_the_range_of_a"),
    snippet: "y={x}^{2}+3",
    examples: ["Range y=x^2+3", "Range y=x^3"]
}, {
    type: "method",
    name: "Rationalize denominator ",
    desc: label("to_ensure_the_denominator_contains"),
    snippet: "\\sqrt{\\frac{49}{3}}",
    examples: ["sqrt(49/3)", "(5*sqrt(2))/sqrt(3)"]
}, {
    type: "method",
    name: "Simplify ",
    desc: label("reduce_an_expression_to_its"),
    snippet: "3x+2y+5x+y",
    examples: ["3x+2y+5x+y", "x^3yx^2"]
}, {
    type: "method",
    name: "Simplify fraction ",
    desc: label("reduce_a_fraction_to_its"),
    snippet: "\\frac{16}{40}",
    examples: ["Simplify fraction 16/40", "Simplify fraction 25/30"]
}, {
    type: "method",
    name: "Solve absolute value equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "2|3x+7|=14",
    examples: ["2|3x+7|=14", "|-2x+5|-7=15"]
}, {
    type: "method",
    name: "Solve equation ",
    desc: label("solve_an_equation"),
    snippet: "3x+4=8",
    examples: ["3x+4=8", "x+y=7 for y"]
}, {
    type: "method",
    name: "Solve exponential equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "{4}^{x}=64",
    examples: ["4^x=64", "7^(x-2)=sqrt(7)"]
}, {
    type: "method",
    name: "Solve inequality ",
    desc: label("equation_solving (sentence case)"),
    snippet: "2x+7>x-4",
    examples: ["2x+7>x-4", "|3+2x|<5"]
}, {
    type: "method",
    name: "Solve linear equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "7x+6=20",
    examples: ["7x+6=20", "x/4+5=7"]
}, {
    type: "method",
    name: "Solve logarithmic equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "4+\\log_{2}{3x}=10",
    examples: ["4+log(2,3x)=10", "log(x+2)+log(3)=log(27)"]
}, {
    type: "method",
    name: "Solve quadratic equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "2{x}^{2}-x-1=0",
    examples: ["2x^2-x-1=0", "1/2x^2-16x=5"]
}, {
    type: "method",
    name: "Solve radical equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "\\sqrt{x}-3=5",
    examples: ["sqrt(x)-3=5", "sqrt(x+7)=2"]
}, {
    type: "method",
    name: "Solve rational equation ",
    desc: label("equation_solving (sentence case)"),
    snippet: "\\frac{3}{4}=\\frac{x}{2}",
    examples: ["3/4=x/2", "(x-3)/15=2/5"]
}, {
    type: "method",
    name: "Solve system of equations ",
    desc: label("equation_solving (sentence case)"),
    snippet: "x+y=5\\;,\\;2x+y=8",
    examples: ["x+y=5 2x+y=8", "2a+2b=16 a+3b=14"]
}, {
    type: "method",
    name: "? to decimal",
    desc: label("convert_an_expression_to_decimal"),
    snippet: "\\frac{3}{4}",
    examples: ["3/4 to decimal", "84% to decimal"]
}, {
    type: "method",
    name: "? to fraction",
    desc: label("convert_a_decimal_or_percent"),
    snippet: "1.75",
    examples: ["1.75 to fraction", "5% to fraction"]
}, {
    type: "method",
    name: "? to improper fraction",
    desc: label("convert_a_fraction_to_improper"),
    snippet: "4\\frac{3}{5}",
    examples: ["4 3/5 to improper fraction", "3 1/24 to improper fraction"]
}, {
    type: "method",
    name: "? to mixed fraction",
    desc: label("convert_a_fraction_to_mixed"),
    snippet: "\\frac{17}{3}",
    examples: ["17/3 to mixed fraction", "200/7 to mixed fraction"]
}, {
    type: "method",
    name: "? to percent",
    desc: label("convert_an_expression_to_percent"),
    snippet: "1.75",
    examples: ["1.75 to percent", "3/4 to percent"]
}];

function label(b) {
    try {
        return g_language_map_shared_js[b][g_lang]
    } catch (a) {}
    try {
        return g_language_map_desktop_js[b][g_lang]
    } catch (a) {}
    try {
        return g_language_map_mobile_js[b][g_lang]
    } catch (a) {}
}
$.preloadImages = function() {
    for (var a = 0; a < arguments.length; a++) {
        $("<img />").attr("src", arguments[a])
    }
};
if (typeof g_redirect_to_main_js !== "undefined") {
    if (g_redirect_to_main_js) {
        redirect_to_main_js()
    }
}

function show_label_id() {
    return window.location.search.substr(1).indexOf("show_label_id") !== -1
}
if (!g_mobile_or_tablet) {
    if (g_is_answer_page) {
        if (typeof(Storage) !== "undefined") {
            var keyboard_state = sessionStorage.getItem("keyboard_state");
            if (keyboard_state === "on") {
                keyboard_on()
            } else {
                keyboard_off()
            }
        }
    } else {
        if (g_is_home_page) {
            sessionStorage.setItem("keyboard_state", "off")
        }
    }
}
if (!g_is_home_page && !g_is_answer_page) {
    $("div.itn, div.math, div.math_i").each(function(a, b) {
        renderMathInElement(b, {
            delimiters: [{
                left: "\\[",
                right: "\\]",
                display: true
            }, {
                left: "\\(",
                right: "\\)",
                display: false
            }]
        })
    });
    $.preloadImages("/img/loading.gif")
}
if (g_mobile_or_tablet) {
    if (g_is_answer_page) {
        g_input_text = $("#q_input").text();
        g_cursor_pos = g_input_text.length;
        update_input_div_for_mobile()
    }
}
if (g_mobile_or_tablet) {
    if (g_is_home_page) {
        if (!g_release_math_input) {
            update_latex();
            async_load_mobile_keyboards();
            async_load_mobile_front_page_images()
        }
    }
    remove_hover_in_css()
}
if (webview()) {
    if (webview_android_account_interface()) {
        if (typeof AndroidAccountInterface.removeLoadingDialog !== "undefined") {
            AndroidAccountInterface.removeLoadingDialog()
        }
    }
    ios_post_message({
        command: "removeLoadingDialog"
    });
    ios_post_message({
        command: "updateScreenFromGuestId"
    })
}
if ($("#term_preview").length) {
    $("#term_preview").css({
        visibility: "hidden"
    });
    renderMathInElement($("#term_preview")[0], {
        delimiters: [{
            left: "\\[",
            right: "\\]",
            display: true
        }]
    });
    $("#term_preview").css({
        visibility: "visible"
    })
}
if (!g_mobile_or_tablet) {
    $("div.footer_div").show()
}
if (g_release_math_input) {
    if (g_mobile_or_tablet && g_is_home_page) {
        focus_input();
        $("#enter_problem_box").html("<div id='choose_topic_button_mobile' class='no_select'><span id='choose_topic_text' style='float: left;'></span></div><span id='clear_button_div'></span>");
        $("#enter_problem_box").css("visibility", "visible");
        $("#example_box").html("<div class='triangle_up'></div><span id='example_katex'></span>");
        update_example();
        $("#example_box").css({
            margin: "0 auto",
            "margin-top": "4px"
        });
        $("#example_katex").css({
            padding: "8px 16px",
            "line-height": "32px",
            "font-size": "18px",
            color: "#666",
            "text-align": "center",
            "border-radius": "4px",
            "background-color": "#DDD"
        });
        $("#choose_topic_text").text(label("choose_topic"));
        $("div.keypad-input").append("<div id='input_placeholder' style='font-size: 20px; position: absolute; top: 8px; left: 16px; color: #CCC;'>" + label("enter_problem_or_choose_topic") + "</div>");
        $("div.keypad-input").css({
            "box-shadow": "0 0 8px #DDD",
            margin: "0 4px"
        });
        $("div.keypad-container").css({
            "box-shadow": "0 0 8px #DDD"
        });
        handle_back()
    }
}

function app_version(c) {
    var b;
    var a = (c == "iOS") ? /Cymath\/iOS\/([0-9]+\.[0-9]+)/g : /Cymath\/Android\/([0-9]+\.[0-9]+)/g;
    var b = a.exec(navigator.userAgent);
    if (b) {
        if (b.length == 2) {
            return b[1]
        }
    }
    return ""
}

function get_back_q_from_local_storage() {
    if (window.localStorage) {
        var a = localStorage.getItem("back_q");
        if (a) {
            return prepare_q_for_display(a)
        }
    }
    return null
}

function get_edit_q_from_app_interface() {
    var a = null;
    if (webview_android_main_interface()) {
        try {
            if (typeof AndroidInterface.getQuestionToEdit === "function") {
                var b = AndroidInterface.getQuestionToEdit();
                if (b !== "") {
                    a = b
                }
            }
        } catch (c) {}
    }
    return a
}
if (!g_release_math_input) {
    if (g_mobile_or_tablet) {
        if (g_is_home_page) {
            var edit_q = get_edit_q_from_app_interface();
            var back_q = get_back_q_from_local_storage();
            if (back_q !== null || edit_q !== null) {
                if (edit_q !== null) {
                    g_input_text = edit_q
                } else {
                    g_input_text = back_q
                }
                g_cursor_pos = g_input_text.length;
                update_input_div_for_mobile();
                update_latex()
            }
        }
    }
}
if (typeof String.prototype.trim !== "function") {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, "")
    }
}
if (g_is_home_page) {
    webview_update_menu_and_user_level()
}
if (g_is_marketing_page) {
    if (webview_android()) {
        if (webview_android_account_interface()) {
            android_update_menu()
        }
    } else {
        if (webview_ios()) {
            ios_update_menu()
        }
    }
}
if (g_is_answer_page) {
    $("#term_preview_div").css("visibility", "hidden");
    var q = encodeURIComponent($("#term_input").text());
    if ($("#graph_div").length) {
        $("#sharing_box").show();
        $("#native_ad_box").css("visibility", "visible");
        $("#feedback_box").show();
        $("div.content_footer").show();
        load_social_js();
        load_feedback_js()
    } else {
        get_steps(q)
    }
    if (g_plus_user) {
        update_bookmark_indicator(q);
        add_history(q)
    }
}

function add_history(a) {
    $.ajax({
        url: "/ajax/manage_user_data.php?action=add_history&q=" + a,
        method: "GET",
        success: function(b) {}
    })
}

function webview_update_menu_and_user_level() {
    if (webview_android()) {
        android_update_menu();
        android_update_user_level()
    } else {
        if (webview_ios()) {
            ios_update_menu();
            ios_update_user_level()
        }
    }
}
$("#q").on("click", function(a) {
    if (!g_mobile_or_tablet) {
        return
    }
    if (a.pageX > g_last_div_pos_in_pixel + g_half_char_div_width) {
        g_cursor_pos = g_input_text.length;
        update_input_div_for_mobile();
        return
    }
    if (a.pageX < g_half_char_div_width * 4) {
        g_cursor_pos = 0;
        update_input_div_for_mobile();
        return
    }
});

function switch_homepage_to_answer_mode_on_first_input() {
    if (g_is_first_keypress && g_is_home_page) {
        $("#main_logo").hide();
        $("#cymath_slogan").hide();
        $("#social_links").hide();
        $("#examples_section").hide();
        $(".term_input_td").attr("align", "left");
        $("#term_preview_div").css("display", "inline-block");
        $(".logo_text").css("display", "inline");
        if (!g_plus_user) {
            $("#ads").show();
            $("div.banner_ad").show()
        }
        g_is_first_keypress = false
    }
}
$("#q").on(g_button_trigger_event, "span", function(b) {
    if (!g_mobile_or_tablet) {
        return
    }
    var f = $(this).attr("id");
    if (typeof(f) === "undefined") {
        return
    }
    var a = f.substr(2);
    var d = parseInt(a, 10);
    var c = $(this).offset();
    if (b.pageX - c.left < g_half_char_div_width) {
        d--
    }
    if (d > g_cursor_pos) {
        g_cursor_pos = d
    } else {
        g_cursor_pos = parseInt(d, 10) + 1
    }
    if (g_input_text[g_cursor_pos] == "?") {
        g_cursor_pos++
    }
    update_input_div_for_mobile()
});
$("#steps_div").on(g_button_trigger_event, "#check_answer_button", function(a) {
    check_answer_toggle()
});
$("#nav_trigger").on(g_button_trigger_event, function(a) {
    if (g_drawer_closed) {
        $("div.navigation_drawer").animate({
            left: "+=200"
        }, 200)
    } else {
        $("div.navigation_drawer").animate({
            left: "-=200"
        }, 200)
    }
    g_drawer_closed = !g_drawer_closed
});
$("#navigation_drawer_close").on(g_button_trigger_event, function(a) {
    $("div.navigation_drawer").animate({
        left: "-=200"
    }, 200);
    g_drawer_closed = true
});
$(".submit_solve").on("click", function(a) {
    process_submit_solve()
});

function process_submit_solve() {
    var d;
    if (g_mobile_or_tablet) {
        d = g_input_text
    } else {
        d = $("#q").val()
    }
    var c = prepare_q_for_url(d);
    if (g_mobile_or_tablet && !webview()) {
        if (window.localStorage) {
            localStorage.setItem("back_q", c)
        }
    }
    if (webview_android_main_interface()) {
        AndroidInterface.getSolution(c)
    } else {
        if (webview_ios()) {
            ios_post_message({
                command: "getSolution",
                q: c
            })
        } else {
            var a = encodeURIComponent(c);
            var b = make_lang_url("answer?q=" + a);
            window.location.href = b
        }
    }
}

function make_lang_url(b) {
    var a = "/" + g_lang + "/" + b;
    a = a.replace("/en/", "/");
    return a
}
$("#examples_button").on(g_button_trigger_event, function(a) {
    if (!g_showing_examples) {
        $("#examples_section").css("visibility", "visible").hide().slideDown();
        g_showing_examples = true;
        ga("send", "event", "solver", "click show examples", "web")
    } else {
        $("#examples_section").css("visibility", "hidden");
        g_showing_examples = false
    }
});

function prepare_q_for_url(a) {
    a = replace_all("\u00F7", "#", a);
    return a
}

function prepare_q_for_display(a) {
    a = replace_all("#", "\u00F7", a);
    return a
}
$("body").on("keypress", "#q", function(a) {
    if (a.keyCode == 13) {
        $(".submit_solve").click();
        return false
    }
});

function q_focus_and_caret_to_end() {
    var a = $("#q").val().length;
    q_focus_and_caret_to_pos(a)
}

function q_focus_and_caret_to_pos(a) {
    window.setTimeout(function() {
        $("#q").focus();
        $("#q")[0].setSelectionRange(a, a)
    }, g_ui_delay)
}
$(document).ready(function() {
    if (!g_is_home_page) {
        load_feedback_js()
    }
    if (!g_mobile_or_tablet) {
        if (g_is_home_page || g_is_answer_page) {
            q_focus_and_caret_to_end()
        }
    }
});

function load_feedback_js() {
    $("#feedback_submit").click(function() {
        $.post("/ajax/send_feedback.php", $("#feedback_form").serialize(), function(a) {
            $("#feedback_success").html("<div style='display: inline; color: #0B6; font-weight: bold;'>Message Sent. Thanks for the Feedback!</div>");
            ga("send", "event", "feedback", "send feedback", "all")
        });
        $("#feedback_message").val("");
        return false
    });
    $("#feedback_message").keypress(function(a) {
        if (a.keyCode == "13") {
            a.preventDefault();
            $("#feedback_submit").trigger("click")
        }
    })
}

function load_social_js() {
    var a = document.getElementById("social_buttons");
    if (a == null) {
        return
    }
    window.twttr = (function(g, c, h) {
        var f, e = g.getElementsByTagName(c)[0],
            b = window.twttr || {};
        if (g.getElementById(h)) {
            return b
        }
        f = g.createElement(c);
        f.id = h;
        f.src = "https://platform.twitter.com/widgets.js";
        e.parentNode.insertBefore(f, e);
        b._e = [];
        b.ready = function(d) {
            b._e.push(d)
        };
        return b
    }(document, "script", "twitter-wjs"));
    twttr.ready(function(b) {
        b.events.bind("tweet", function(c) {
            ga("send", "event", "social", "share by twitter", "all")
        })
    });
    document.getElementById("facebook_share").onclick = function() {
        var b = "https://www.facebook.com/sharer/sharer.php?u=";
        b += encodeURIComponent(location.href);
        window.open(b, "fbshare", "width=640,height=320");
        ga("send", "event", "social", "share by facebook", "all")
    }
}
$("#email_button").on(g_button_trigger_event, function(a) {
    ga("send", "event", "social", "share by email", "all")
});
$("a.rule_underline").on(g_button_trigger_event, function(a) {
    ga("send", "event", "solver", "click reference", "all")
});

function show_hide_solution_how(c) {
    var a = $("#" + c);
    if (a) {
        var b = $("#button-" + c);
        if (a.is(":hidden")) {
            b.css("font-weight", "bold");
            b.css("background-color", "#EFE");
            a.show()
        } else {
            b.css("font-weight", "normal");
            b.css("background-color", "transparent");
            a.hide()
        }
    }
}

function set_why_button_expanded_state(b, a) {
    if (a) {
        $("#why_button_" + b).data("expanded", "1");
        $("#why_button_" + b).css("font-weight", "bold");
        $("#why_button_" + b).css("background-color", "#EFE")
    } else {
        $("#why_button_" + b).data("expanded", "0");
        $("#why_button_" + b).css("font-weight", "normal");
        $("#why_button_" + b).css("background-color", "transparent")
    }
}

function toggle_why_button_expanded_state(b) {
    var a = ($("#why_button_" + b).data("expanded") == "1");
    set_why_button_expanded_state(b, !a)
}

function show_hide_reason(a) {
    $("#" + a).toggle();
    toggle_why_button_expanded_state(a)
}

function show_reason(a) {
    $("#" + a).show();
    set_why_button_expanded_state(a, true)
}

function hide_reason(a) {
    $("#" + a).hide();
    set_why_button_expanded_state(a, false)
}
$("#steps_div").on(g_button_trigger_event, "#show_hide_all_whys", function(a) {
    if ($("#show_hide_all_whys").text() == "[Show All]") {
        $("div.solution_why_block").each(function() {
            show_reason($(this).attr("id"))
        });
        $("#show_hide_all_whys").text("[Hide All]")
    } else {
        $("div.solution_why_block").each(function() {
            hide_reason($(this).attr("id"))
        });
        $("#show_hide_all_whys").text("[Show All]")
    }
});
(function(a) {
    a.fn.getCursorPosition = function() {
        var c = this.get(0);
        if (!c) {
            return
        }
        if ("selectionStart" in c) {
            return c.selectionStart
        } else {
            if (document.selection) {
                c.focus();
                var d = document.selection.createRange();
                var b = document.selection.createRange().text.length;
                d.moveStart("character", -c.value.length);
                return d.text.length - b
            }
        }
    };
    a.fn.selectRange = function(f, b) {
        var d = document.getElementById(a(this).attr("id"));
        if (!d) {
            return
        } else {
            if (d.setSelectionRange) {
                d.focus();
                d.setSelectionRange(f, b)
            } else {
                if (d.createTextRange) {
                    var c = d.createTextRange();
                    c.collapse(true);
                    c.moveEnd("character", b);
                    c.moveStart("character", f);
                    c.select()
                } else {
                    if (d.selectionStart) {
                        d.selectionStart = f;
                        d.selectionEnd = b
                    }
                }
            }
        }
    }
})(jQuery);

function updateMath(b) {
    if (b == "invalid") {
        return
    }
    b = b.replace(/\&lt\;/g, "<");
    b = b.replace(/\&gt\;/g, ">");
    b = b.replace(/\&amp\;/g, "&");
    var a = document.getElementById("steps");
    if (a != null) {
        $("#steps_div").hide();
        $("#feedback_box").hide();
        $("#sharing_box").hide();
        $("#native_ad_box").hide()
    }
    $("#term_preview").text("\\[" + b + "\\]");
    renderMathInElement($("#term_preview")[0], {
        delimiters: [{
            left: "\\[",
            right: "\\]",
            display: true
        }]
    })
}

function debounce(b, d, a) {
    var e = +new Date();

    function c() {
        d(a);
        g_timeout = null
    }
    if (g_timeout) {
        clearTimeout(g_timeout)
    }
    g_timeout = setTimeout(c, b || 100);
    g_last_exec = e
}

function get_latex(a) {
    if (a == "" || /^\d+$/.test(a)) {
        updateMath(a);
        return
    }
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest()
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")
    }
    xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            updateMath(xmlhttp.responseText.trim())
        }
    };
    a = encodeURIComponent(a);
    xmlhttp.open("GET", "/ajax/get_latex.php?q=" + a + "&lang=" + g_lang, true);
    xmlhttp.send()
}

function computed_solution() {
    return $("#steps").find(".oops_title").length == 0
}

function need_clarify() {
    return $("#steps").find(".clarify").length != 0
}

function num_steps_in_solution() {
    var a = ($("#steps").html().match(/\"nc0\"/g) || []).length;
    return a
}

function get_steps(b) {
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest()
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")
    }
    xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            var c = document.getElementById("steps");
            if (c != null) {
                c.innerHTML = xmlhttp.responseText;
                $("div.itn, div.math, div.math_i").each(function(d, e) {
                    renderMathInElement(e, {
                        delimiters: [{
                            left: "\\[",
                            right: "\\]",
                            display: true
                        }, {
                            left: "\\(",
                            right: "\\)",
                            display: false
                        }]
                    })
                });
                $("#steps_div").css("visibility", "visible");
                $("#question_buttons_div").show();
                $("div.content_footer").show();
                if (need_clarify()) {
                    ga("send", "event", "solver", "need clarify", "all")
                } else {
                    if (computed_solution()) {
                        if (g_mobile_or_tablet && !webview() && num_steps_in_solution() >= g_min_num_steps_to_show_ad) {
                            $("#native_ad_box").css("visibility", "visible")
                        } else {
                            $("#native_ad_box").hide()
                        }
                        $("#sharing_box").show();
                        $("#feedback_box").show();
                        ga("send", "event", "solver", "calculation succeeded", "all");
                        app_inc_num_good_calcs()
                    } else {
                        $("#feedback_category").val("issue");
                        $("#feedback_success").html("Report this issue / provide more detail.");
                        $("#feedback_box").show();
                        ga("send", "event", "solver", "calculation failed", "all")
                    }
                }
                load_social_js();
                load_feedback_js();
                log_plus_user_question(g_user_login_id, b)
            }
        }
    };
    var a = "/ajax/" + g_get_steps_script_name + "?q=" + b + "&lang=" + g_lang;
    if (g_plus_user) {
        a += "&plus"
    }
    if (show_label_id()) {
        a += "&show_label_id"
    }
    xmlhttp.open("GET", a, true);
    xmlhttp.send()
}

function get_check_answer(f, c) {
    ga("send", "event", "solver", "check answer", "all");
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest()
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")
    }
    xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            $("#check_answer_div").html(xmlhttp.responseText);
            renderMathInElement($("#check_answer_div")[0], {
                delimiters: [{
                    left: "\\[",
                    right: "\\]",
                    display: true
                }, {
                    left: "\\(",
                    right: "\\)",
                    display: false
                }]
            });
            $("#check_answer_div").show()
        }
    };
    var b = encodeURIComponent(f);
    var d = encodeURIComponent(c);
    var e = "/ajax/" + g_get_steps_script_name + "?q=" + b + "&a=" + d + "&lang=" + g_lang;
    if (g_plus_user) {
        e += "&plus"
    }
    xmlhttp.open("GET", e, true);
    xmlhttp.send()
}
$("#q").each(function() {
    var a = $(this);
    a.data("oldVal", a.val());
    a.bind("paste keyup", function(c) {
        if (g_mobile_or_tablet) {
            return
        }
        var b = a.val();
        if (a.data("oldVal") != b) {
            debounce(g_debounce_limit_in_ms, get_latex, get_q_value());
            a.data("oldVal", b)
        }
        switch_homepage_to_answer_mode_on_first_input()
    });
    a.bind("click", function() {
        snap_to_question_mark(a)
    })
});
$(".typeahead").on("typeahead:cursorchange", function(a, b) {
    if (b) {
        q_update_autocomplete()
    }
});
$(".typeahead").on("typeahead:select", function(a, b) {
    if (b) {
        q_update_autocomplete()
    }
});

function q_update_autocomplete() {
    update_caret();
    update_latex()
}

function update_caret() {
    if (q_has_question_mark()) {
        q_highlight_question_mark()
    } else {
        q_focus_and_caret_to_end()
    }
}

function q_has_question_mark() {
    var a = $("#q").val().indexOf("?");
    return a != -1
}

function q_highlight_question_mark() {
    var a = $("#q").val().indexOf("?");
    if (a == -1) {
        return
    }
    $("#q").selectRange(a, a + 1)
}

function snap_to_question_mark(a) {
    var b = a.val();
    if (b.indexOf("?") >= 0) {
        var c = a.getCursorPosition();
        if (c >= 0) {
            if (b[c] == "?") {
                a.selectRange(c, c + 1)
            } else {
                if (b[c - 1] == "?") {
                    a.selectRange(c - 1, c)
                }
            }
        }
    }
}

function webview() {
    return webview_ios() || webview_android()
}

function webview_ios() {
    return navigator.userAgent.indexOf("Cymath/iOS/") != -1
}

function webview_android() {
    return navigator.userAgent.indexOf("Cymath/Android/") != -1
}

function webview_android_main_interface() {
    return (typeof AndroidInterface !== "undefined")
}

function webview_android_solution_interface() {
    return (typeof AndroidSolutionInterface !== "undefined")
}

function webview_android_account_interface() {
    return (typeof AndroidAccountInterface !== "undefined")
}

function check_answer_toggle() {
    if (g_check_answer_on) {
        var d = $("#check_answer_button").html();
        $("#check_answer_button").html(d.replace("โฒ", "โผ"));
        $("#check_answer_div").hide()
    } else {
        var c = $("#term_input").text();
        var b = $("#answer").text();
        get_check_answer(c, b);
        var d = $("#check_answer_button").html();
        $("#check_answer_button").html(d.replace("โผ", "โฒ"))
    }
    g_check_answer_on = !g_check_answer_on
}
$("#topic_container_popular > div").on("click", function(a) {
    ga("send", "event", "solver", "choose topic popular item", "all")
});
$("#topic_container_all > div").on("click", function(a) {
    ga("send", "event", "solver", "choose topic all item", "all")
});

function method_name_to_label_id(a) {
    var b = replace_all(" ", "_", a.replace("? ", "").toLowerCase());
    switch (b) {
        case "expand":
            return "expand (ui)";
        case "simplify":
            return "simplify (ui)";
        case "complete_the_square":
            return "complete_the_square (ui)"
    }
    return b
}

function init_choose_topic_popup() {
    if ($("#topic_container_all").children().length == 0) {
        var d = ["Differentiate", "Expand", "Factor", "Graph", "Integrate", "Simplify", "Solve equation"];
        var a = d.length;
        for (i = 0; i < a; i++) {
            var b = d[i];
            var c = method_name_to_label_id(b);
            $("#topic_container_popular").append("<div data-command='" + b + "'>" + label(c) + "</div>")
        }
        var a = g_autocomp_methods.length;
        for (i = 0; i < a; i++) {
            var b = g_autocomp_methods[i].name.trim();
            var c = method_name_to_label_id(b);
            $("#topic_container_all").append("<div data-command='" + b + "'>" + label(c) + "</div>")
        }
        $("#choose_topic_tab_popular > span").text(label("popular"));
        $("#choose_topic_tab_all > span").text(label("all"));
        $("#choose_topic_search_box").attr("placeholder", label("search"));
        $("#topic_container_popular > div, #topic_container_all > div").on("click", function(f) {
            hide_choose_topic_popup();
            var g = $(this).data("command");
            if (g_release_math_input && g_mobile_or_tablet) {
                choose_method(g)
            } else {
                set_autocomplete_method(g)
            }
            $("#problem_input").css("pointer-events", "none");
            setTimeout(function() {
                $("#problem_input").css("pointer-events", "auto")
            }, g_ui_delay)
        })
    }
    $("#choose_topic_tab_popular").trigger(g_button_trigger_event);
    $("#choose_topic_search_box").val("")
}
$("#choose_topic_button_desktop").on(g_button_trigger_event, function(a) {
    ga("send", "event", "solver", "choose topic", "all");
    show_choose_topic_popup()
});
$("#choose_topic_button_mobile").on(g_button_trigger_event, function(a) {
    pushstate_choose_topic();
    show_choose_topic_popup()
});
$("#q").on("click", "#choose_topic_button_mobile", function(a) {
    show_choose_topic_popup()
});

function show_popup(a) {
    if (!webview()) {
        $("div.cymath_popup > div").css({
            "margin-top": "60px",
            height: "calc(100% - 60px)"
        })
    }
    if (!g_mobile) {
        $("div.cymath_popup > div").css({
            "margin-top": "96px",
            width: "480px",
            height: "600px"
        });
        $("div.site_overlay").css("display", "block")
    }
    $(a).css("top", "2000px");
    $(a).css("display", "block");
    $(a).animate({
        top: 0
    });
    setTimeout(function() {
        $(a).css("pointer-events", "auto")
    }, g_ui_delay)
}

function hide_popup(a) {
    $(a).animate({
        top: "2000px"
    }, 500, function() {
        $(a).css("display", "none");
        if (!g_mobile) {
            $("div.site_overlay").css("display", "none")
        }
    });
    setTimeout(function() {
        $(a).css("pointer-events", "none")
    }, g_ui_delay)
}

function show_choose_topic_popup() {
    ga("send", "event", "solver", "choose topic", "all");
    init_choose_topic_popup();
    show_popup("#choose_topic_popup")
}

function hide_choose_topic_popup() {
    hide_popup("#choose_topic_popup")
}

function hide_mobile_language_popup() {
    hide_popup("#mobile_language_popup")
}

function show_mobile_language_popup() {
    show_popup("#mobile_language_popup")
}
$("#show_mobile_language_popup_button").on(g_button_trigger_event, function(a) {
    $("#navigation_drawer_close").trigger(g_button_trigger_event);
    show_mobile_language_popup()
});

function hide_email_support_popup() {
    hide_popup("#email_support_popup")
}

function show_email_support_popup() {
    show_popup("#email_support_popup")
}
$("#show_email_support_popup_button").on(g_button_trigger_event, function(a) {
    show_email_support_popup()
});
$("#choose_topic_search_box").keyup(function() {
    var b = this.value.toLowerCase(),
        a = this.value.length;
    $("#topic_container_all > div").each(function() {
        var e = $(this).text(),
            c = e.toLowerCase(),
            d = e.substr(0, a) + e.substr(a);
        fuzzy_search(b, c) ? $(this).html(d).show() : $(this).hide()
    })
});
$("#choose_topic_search_box").on("focus", function(a) {
    ga("send", "event", "solver", "choose topic search", "all")
});

function keyboard_on() {
    $("#keyboard_link").html("<img class='keyboard_icon_desktop greyscale' src='/img/keyboard_v2.png' />");
    $("#keyboard_div").css("display", "inline");
    if (typeof(Storage) !== "undefined") {
        sessionStorage.setItem("keyboard_state", "on")
    }
}

function keyboard_off() {
    $("#keyboard_link").html("<img class='keyboard_icon_desktop' src='/img/keyboard_v2.png' />");
    $("#keyboard_div").css("display", "none");
    if (typeof(Storage) !== "undefined") {
        sessionStorage.setItem("keyboard_state", "off")
    }
}

function get_q_elem() {
    if (!g_q_elem) {
        g_q_elem = document.getElementById("q")
    }
    return g_q_elem
}

function get_q_value() {
    if (g_mobile_or_tablet) {
        return g_input_text
    } else {
        var a = get_q_elem();
        return a.value
    }
}

function insert_text_internal_mobile(b) {
    if (g_upper) {
        if (/^[a-z]$/.test(b)) {
            b = b.toUpperCase()
        }
    }
    var a = (g_input_text[g_cursor_pos - 1] == "?") ? g_cursor_pos - 1 : g_cursor_pos;
    g_input_text = g_input_text.substr(0, a) + b + g_input_text.substr(g_cursor_pos);
    g_cursor_pos = Number(a) + Number(b.length);
    if (b.length > 1) {
        var c = b.indexOf("?");
        if (c != -1) {
            g_cursor_pos = a + c + 1
        } else {
            if (b.substr(b.length - 2, 2) == "()") {
                g_cursor_pos--
            }
        }
    }
    update_input_div_for_mobile()
}

function insert_text_internal_desktop(c) {
    switch_homepage_to_answer_mode_on_first_input();
    var e = $("#q").getCursorPosition();
    var b = $("#q").val().substr(0, e);
    var d = $("#q").val().substr(e);
    var a = b + c + d;
    $("#q").typeahead("val", a);
    update_caret()
}

function insert_text(a) {
    if (g_mobile_or_tablet) {
        insert_text_internal_mobile(a)
    } else {
        insert_text_internal_desktop(a)
    }
    update_latex()
}

function update_latex() {
    var a = get_q_value();
    debounce(g_debounce_limit_in_ms, get_latex, a);
    $("#q").data("oldVal", a)
}

function get_text_with_cursor() {
    return g_input_text.substr(0, g_cursor_pos) + "$" + g_input_text.substr(g_cursor_pos)
}

function backspace() {
    if (g_cursor_pos == 0) {
        return
    }
    g_input_text = g_input_text.substr(0, g_cursor_pos - 1) + g_input_text.substr(g_cursor_pos);
    g_cursor_pos--;
    update_input_div_for_mobile();
    update_latex()
}

function clear_text_internal() {
    if (g_mobile_or_tablet) {
        g_cursor_pos = 0;
        g_input_text = "";
        update_input_div_for_mobile()
    }
    $("#q").val("")
}

function clear_text() {
    clear_text_internal();
    update_latex()
}

function show_clarify_ocr_message() {}

function set_text(a) {
    clear_text_internal();
    insert_text(a)
}

function update_last_div_pos_in_pixel(a) {
    g_last_div_pos_in_pixel = 0;
    if (a > 1) {
        var b = "#qi" + (a - 2);
        if ($(b).offset()) {
            g_last_div_pos_in_pixel = $(b).offset().left
        }
    }
}

function update_mobile_buttons() {
    if (g_input_text.length >= 1) {
        $("#nav_clear").show();
        $("#nav_backspace").show()
    } else {
        $("#nav_clear").hide();
        $("#nav_backspace").hide()
    }
}

function set_autocomplete_method(b) {
    var a = (b.indexOf("?") === -1) ? b + " " : b;
    set_text(a);
    if (g_mobile_or_tablet) {
        $("#mobile_autocomplete_box").hide();
        show_mobile_method_help()
    }
}

function update_mobile_autocomplete() {
    var a = get_mobile_autocomplete_items(g_input_text);
    if (g_input_text == "" || a.num_items == 0) {
        $("#mobile_autocomplete_box").hide();
        hide_mobile_method_help()
    } else {
        $("#mobile_autocomplete_box").html(a.str);
        if (!g_123_not_abc) {
            $("#mobile_autocomplete_box").show()
        }
        hide_mobile_method_help()
    }
}

function show_mobile_method_help() {
    var a = get_method_examples(g_input_text);
    if (a && a.length > 0) {
        $("#mobile_method_help_box").html(make_mobile_examples_str(a));
        $("#mobile_method_help_box").show()
    }
}

function hide_mobile_method_help() {
    $("#mobile_method_help_box").hide()
}

function get_method_examples(b) {
    var a = g_autocomp_methods.length;
    for (i = 0; i < a; i++) {
        var c = g_autocomp_methods[i];
        if (b == c.name) {
            return c.examples
        }
    }
    return false
}
$("#edit_question_button").on(g_button_trigger_event, function(a) {
    ga("send", "event", "solver", "edit question", "all");
    if (g_release_math_input) {
        edit_question_button_handler()
    } else {
        edit_question_button_handler_old()
    }
});

function edit_question_button_handler() {
    var a = $("#q_latex").text();
    if (webview_android_solution_interface()) {
        AndroidSolutionInterface.setQuestionToEdit(a);
        AndroidSolutionInterface.closeSolution()
    } else {
        if (webview_ios()) {
            ios_post_message({
                command: "setQuestionToEdit",
                q: a
            });
            ios_post_message({
                command: "closeSolution"
            })
        }
    }
}

function edit_question_button_handler_old() {
    var a = $("#term_input").text();
    if (webview_android_solution_interface()) {
        AndroidSolutionInterface.setQuestionToEdit(a);
        AndroidSolutionInterface.closeSolution()
    } else {
        if (webview_ios()) {
            ios_post_message({
                command: "setQuestionToEdit",
                q: a
            });
            ios_post_message({
                command: "editQuestion"
            })
        }
    }
}

function get_mobile_autocomplete_items(g) {
    var d = g.toLowerCase();
    var f = "";
    var e = 0;
    var a = g_autocomp_methods.length;
    for (var b = 0; b < a; b++) {
        method_name = g_autocomp_methods[b].name;
        method_name_lc = method_name.toLowerCase();
        if (fuzzy_search(d, method_name_lc)) {
            f += "<div data-method='" + method_name + "' class='mobile_autocomplete_row'><div class='mobile_autocomplete_item'>" + display_name(method_name) + "</div><div class='mobile_autocomplete_arrow'><div class='sprite sprite-autocomp_arrow'></div></div><div style='clear: both'></div></div>";
            e++;
            if (e >= g_autocomplete_max_num_items_mobile) {
                break
            }
        }
    }
    var c = {
        num_items: e,
        str: f
    };
    return c
}

function get_random_int(b, a) {
    return Math.floor(Math.random() * (a - b + 1) + b)
}

function get_random_id() {
    return get_random_int(100000000, 999999999)
}
$("div.log_in_button").on(g_button_trigger_event, function(a) {
    ga("send", "event", "plus", "click log in from header", "all")
});
$("div.join_plus_button").on(g_button_trigger_event, function(a) {
    ga("send", "event", "plus", "click join plus from header", "all")
});
$("#join_now_top_of_page").on(g_button_trigger_event, function(a) {
    ga("send", "event", "plus", "click join now from top of page", "all")
});
$("#join_now_bottom_of_page").on(g_button_trigger_event, function(a) {
    ga("send", "event", "plus", "click join now from bottom of page", "all")
});
$("#sign_up_link_on_log_in_page").on(g_button_trigger_event, function(a) {
    ga("send", "event", "plus", "click sign up from log in", "all")
});
$("#log_in_link_on_sign_up_page").on(g_button_trigger_event, function(a) {
    ga("send", "event", "plus", "click log in from sign up", "all")
});
$("#join_and_pay_button").on(g_button_trigger_event, function(b) {
    ga("require", "ecommerce");
    var a = webview_ios() ? "iOS" : webview_android() ? "Android" : "Web";
    var c = get_random_id();
    ga("ecommerce:addTransaction", {
        id: c,
        revenue: "5"
    });
    ga("ecommerce:addItem", {
        id: c,
        name: "Cymath Plus",
        category: a,
        price: "5"
    });
    ga("ecommerce:send")
});
$("#rate_app_button").on(g_button_trigger_event, function(a) {
    if (webview_ios()) {
        ga("send", "event", "feedback", "click rate app", "ios")
    } else {
        if (webview_android()) {
            ga("send", "event", "feedback", "click rate app", "android")
        }
    }
});
$("#app_link_ios").on(g_button_trigger_event, function(a) {
    ga("send", "event", "marketing", "click app link", "ios")
});
$("#app_link_android").on(g_button_trigger_event, function(a) {
    ga("send", "event", "marketing", "click app link", "android")
});
$("div.example_bubble").on(g_button_trigger_event, function(a) {
    ga("send", "event", "solver", "click example bubble", "all");
    set_text("2x+5=9");
    hide_example_bubble();
    process_submit_solve()
});
$("div:visible").on(g_button_trigger_event, "div.mobile_autocomplete_row", function(a) {
    var b = $(this).data("method");
    set_text(b);
    $("#mobile_autocomplete_box").hide();
    show_mobile_method_help()
});
$("div:visible").on(g_button_trigger_event, "div.mobile_method_help_row", function(a) {
    var b = $(this).data("method");
    set_text(b);
    $("#mobile_method_help_box").hide()
});
$("div:visible").on(g_button_trigger_event, "div.autocomp_method_help_row", function(b) {
    var a = $(this).data("method-help");
    set_text(a)
});

function update_input_div_for_mobile() {
    var a = get_text_with_cursor();
    var b;
    if (a == "$") {
        b = "<div class='placeholder_text'><span id='typed-cursor' class='blinking'>|</span><span style='color: #999'>" + label("enter_problem_or_choose_topic (button)") + "</span> <div class='sprite sprite-popup'></div></div>"
    } else {
        b = format_input(a)
    }
    $("#q").html(b);
    update_last_div_pos_in_pixel(a.length);
    update_mobile_buttons();
    hide_example_bubble();
    if ($("#q").height() > 30) {
        $("#q").css("top", "0px")
    } else {
        $("#q").css("top", "15px")
    }
    update_mobile_autocomplete()
}

function show_example_bubble() {
    if (g_input_text.length == 0) {
        $("div.example_bubble").show()
    }
}

function hide_example_bubble() {
    $("div.example_bubble").hide()
}
$("#keyboard_link").on("click", function(a) {
    if ($("#keyboard_div").css("display") == "none") {
        keyboard_on();
        ga("send", "event", "solver", "click show keyboard", "web")
    } else {
        keyboard_off()
    }
});
$("#iphone_link").on("click", function(a) {
    $("#openIphonePopup").addClass("iphone_popup_active")
});
$("#iphone_popup_close").on("click", function(a) {
    $("#openIphonePopup").removeClass("iphone_popup_active")
});
$("div.k_en_up").on(g_button_trigger_event, function(a) {
    if (!g_upper) {
        upper()
    } else {
        lower()
    }
});
$("#nav_backspace, div.k_en_bksp").on(g_button_trigger_event, function(a) {
    backspace()
});
$("#nav_clear").on("click", function(a) {
    clear_text()
});

function show_123() {
    $("#keyboard_abc").hide();
    $("#keyboard_123").show();
    $(".nav_abc").text("ABC");
    g_123_not_abc = true;
    $("#mobile_autocomplete_box").hide();
    hide_mobile_method_help()
}

function show_abc() {
    $("#keyboard_abc").show();
    $("#keyboard_123").hide();
    $(".nav_abc").text("123");
    g_123_not_abc = false
}
$(".nav_abc").on(g_button_trigger_event, function(a) {
    $("#keyboard_more").hide();
    if (g_123_not_abc) {
        show_abc()
    } else {
        show_123()
    }
});
$(".nav_more").on(g_button_trigger_event, function(a) {
    if (!$("#keyboard_more").is(":visible")) {
        $("#keyboard_more").show();
        $("#keyboard_123").hide();
        $("#keyboard_abc").hide()
    } else {
        $("#keyboard_more").hide();
        if (g_123_not_abc) {
            show_123()
        } else {
            show_abc()
        }
    }
});
$("#keyboard_div div").on(g_button_trigger_event, function(a) {
    var c = $(this).attr("id");
    if (!c) {
        return
    }
    if (c.substr(2, 2) == "en") {
        var b = c.substr(5);
        if (b == "space") {
            insert_text(" ")
        } else {
            insert_text(b)
        }
        if (g_upper) {
            lower()
        }
        return
    }
    switch (c) {
        case "k_plus":
            insert_text("+");
            break;
        case "k_minus":
            insert_text("-");
            break;
        case "k_br_l":
            insert_text("(");
            break;
        case "k_br_r":
            insert_text(")");
            break;
        case "k_n1":
            insert_text("1");
            break;
        case "k_n2":
            insert_text("2");
            break;
        case "k_n3":
            insert_text("3");
            break;
        case "k_multi":
            insert_text("*");
            break;
        case "k_div":
            insert_text("\u00F7");
            break;
        case "k_pow":
            insert_text_for_power("^", "(?)^(?)");
            break;
        case "k_pow2":
            insert_text_for_power("^2", "(?)^2");
            break;
        case "k_n4":
            insert_text("4");
            break;
        case "k_n5":
            insert_text("5");
            break;
        case "k_n6":
            insert_text("6");
            break;
        case "k_frac":
            insert_text("(?)/(?)");
            break;
        case "k_mixed_frac":
            insert_text("?&?/?");
            break;
        case "k_sqrt":
            insert_text("sqrt(?)");
            break;
        case "k_root":
            insert_text("root(?,?)");
            break;
        case "k_n7":
            insert_text("7");
            break;
        case "k_n8":
            insert_text("8");
            break;
        case "k_n9":
            insert_text("9");
            break;
        case "k_slash":
            insert_text("/");
            break;
        case "k_equal":
            insert_text("=");
            break;
        case "k_n0":
            insert_text("0");
            break;
        case "k_period":
            insert_text(".");
            break;
        case "k_pct":
            insert_text("%");
            break;
        case "k_ln":
            insert_text("ln(?)");
            break;
        case "k_gt":
            insert_text(">");
            break;
        case "k_lt":
            insert_text("<");
            break;
        case "k_x":
            insert_text("x");
            break;
        case "k_y":
            insert_text("y");
            break;
        case "k_abs":
            insert_text("|?|");
            break;
        case "k_log":
            insert_text("log(?)");
            break;
        case "k_logx":
            insert_text("log(?,?)");
            break;
        case "k_log10":
            insert_text("log(10,?)");
            break;
        case "k_ge":
            insert_text(">=");
            break;
        case "k_le":
            insert_text("<=");
            break;
        case "k_pi":
            insert_text("PI");
            break;
        case "k_e":
            insert_text("e");
            break;
        case "k_ex":
            insert_text("e^(?)");
            break;
        case "k_inf":
            insert_text("INF");
            break;
        case "k_comma":
            insert_text(",");
            break;
        case "k_cos":
            insert_text("cos(?)");
            break;
        case "k_sin":
            insert_text("sin(?)");
            break;
        case "k_tan":
            insert_text("tan(?)");
            break;
        case "k_sec":
            insert_text("sec(?)");
            break;
        case "k_csc":
            insert_text("csc(?)");
            break;
        case "k_cot":
            insert_text("cot(?)");
            break;
        default:
            break
    }
});

function insert_text_for_power(a, b) {
    if (g_mobile_or_tablet) {
        if (has_potential_base(g_input_text, g_cursor_pos)) {
            insert_text(a)
        } else {
            insert_text(b)
        }
    } else {
        var c = $("#q").getCursorPosition();
        if (has_potential_base(get_q_value(), c)) {
            insert_text(a)
        } else {
            insert_text(b)
        }
    }
}

function has_potential_base(b, c) {
    if (!b) {
        return false
    }
    if (b.length == 0) {
        return false
    }
    var a = b[c - 1];
    switch (a) {
        case "+":
        case "-":
        case "*":
        case "/":
        case "^":
            return false;
        default:
            return true
    }
}

function format_input(d) {
    var c = false;
    if (d[g_cursor_pos - 1] == "?") {
        c = true
    }
    var a = d.length;
    var f = "";
    var g = 0;
    for (var b = 0; b < a; b++) {
        if (b == g_cursor_pos - 1 && c) {
            f += "<span id='qi" + g + "'><div class='question_mark'>?</div></span>";
            g++
        } else {
            if (d[b] != "$") {
                var e;
                if (d[b] == " ") {
                    e = "&nbsp;"
                } else {
                    e = d[b]
                }
                f += "<span id='qi" + g + "'>" + e + "</span>";
                g++
            } else {
                f += "<span id='typed-cursor' class='blinking'>|</span>"
            }
        }
    }
    f = f.replace(/\?/g, "&nbsp;?&nbsp;");
    return f
}

function escape_regex(a) {
    return a.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")
}

function replace_all(d, c, e) {
    return e.replace(new RegExp(escape_regex(d), "g"), c)
}

function upper() {
    $(".row_eng").css("text-transform", "uppercase");
    g_upper = true
}

function lower() {
    $(".row_eng").css("text-transform", "lowercase");
    g_upper = false
}

function show_control(a) {
    if (a) {
        $("#control").css("display", "inline");
        $("#keyboard_div").show()
    } else {
        $("#control").hide();
        $("#keyboard_div").hide()
    }
}

function get_grouped_input() {
    var h = $("#q").getCursorPosition();
    var d = $("#q").val().substr(0, h);
    var c = $("#q").val().substr(h);
    var f = new RegExp("[a-z]+$");
    var e = f.exec(d);
    if (!e) {
        return false
    }
    var a = e[0];
    var g = d.substr(0, d.length - a.length);
    var b = {
        before_word: g,
        word_at_cursor: a,
        after_word: c
    };
    return b
}

function fuzzy_search(g, f) {
    var e = f.length;
    var a = g.length;
    if (a > e) {
        return false
    }
    if (a === e) {
        return g === f
    }
    outer: for (var c = 0, b = 0; c < a; c++) {
        var d = g.charCodeAt(c);
        while (b < e) {
            if (f.charCodeAt(b++) === d) {
                continue outer
            }
        }
        return false
    }
    return true
}
var substringMatcher = function() {
    return function a(e, b) {
        var c = e.toLowerCase();
        if (c == "x" || c == "y" || c == "z") {
            return
        }
        var d = [];
        $.each(g_autocomp_methods, function(f, h) {
            if (h) {
                var g = h.name.toLowerCase();
                if (fuzzy_search(c, g)) {
                    if (d.length < 3) {
                        d.push(h)
                    }
                }
            }
        });
        b(d)
    }
};
if (!g_mobile_or_tablet) {
    var label_examples = label("examples");
    $("#outer_q .typeahead").typeahead({
        hint: true,
        highlight: true,
        minLength: 1
    }, {
        name: "methods",
        display: "name",
        source: substringMatcher(),
        templates: {
            suggestion: function(a) {
                if (a.type == "method") {
                    return "<div style='border-bottom: 1px solid #ddd; padding-bottom: 5px;'><div class='autocomp_method_name'>" + display_name(a.name) + "</div><div class='autocomp_method_desc'>" + a.desc + "</div><div class='autocomp_method_arrow'>&#8598;</div><div style='clear: both'></div><div class='autocomp_method_examples_heading'>" + label_examples + ":</div><div class='autocomp_method_examples'>" + make_desktop_examples_str(a.examples) + "</div></div>"
                } else {
                    return "<div style='border-bottom: 1px solid #ddd; padding-bottom: 5px;'><div class='autocomp_func_name'>" + a.name + "</div><div class='autocomp_func_desc'>" + a.desc + "</div><div class='autocomp_method_arrow'>&#8598;</div><div style='clear: both'></div></div>"
                }
            }
        }
    })
}

function display_name(a) {
    a = a.replace("? ", "");
    ucfirst_name = a.charAt(0).toUpperCase() + a.slice(1);
    return ucfirst_name
}

function make_desktop_examples_str(b) {
    var c = [];
    var a;
    for (var d = 0; d < b.length; d++) {
        a = "<div data-method-help='" + b[d] + "' class='autocomp_method_help_row'>\"" + b[d] + "\"<div class='autocomp_method_help_arrow'>&#8598;</div></div>";
        c.push(a)
    }
    return c.join("")
}

function make_mobile_examples_str(a) {
    var c = "";
    c += "<div class='mobile_method_help_title'>            <div class='mobile_method_help_title_item'>" + label("examples") + "</div>          </div>";
    for (var b = 0; b < a.length; b++) {
        c += "<div data-method='" + a[b] + "' class='mobile_method_help_row'>              <div class='mobile_method_help_item'>" + shorten_example(a[b]) + "</div>              <div class='mobile_method_help_arrow'><div class='sprite sprite-autocomp_arrow'></div></div>              <div style='clear: both'></div>            </div>"
    }
    return c
}

function shorten_example(a) {
    return a.replace("complete the square", "complete...").replace("polynomial division", "polynomial...")
}

function log_plus_user_question(a, b) {
    if (!g_plus_user) {
        return
    }
    var c;
    if (webview_android()) {
        c = "android"
    } else {
        if (webview_ios()) {
            c = "ios"
        } else {
            if (g_mobile) {
                c = "mobile"
            } else {
                if (g_tablet) {
                    c = "tablet"
                } else {
                    c = "desktop"
                }
            }
        }
    }
    $.ajax({
        url: "https://www.cymathupload.us/log.php?type=question_plus&user_email=" + encodeURIComponent(a) + "&question=" + encodeURIComponent(b) + "&env=" + c,
        method: "GET",
        success: function(d) {}
    })
}
$("#choose_topic_popup_cancel").on(g_button_trigger_event, function(a) {
    hide_choose_topic_popup()
});
$("#mobile_language_popup_cancel").on(g_button_trigger_event, function(a) {
    hide_mobile_language_popup()
});
$("#email_support_popup_cancel").on(g_button_trigger_event, function(a) {
    hide_email_support_popup()
});
$("#choose_topic_tab_popular").on(g_button_trigger_event, function(a) {
    $("#choose_topic_tab_popular").addClass("choose_topic_tab_selected");
    $("#choose_topic_tab_popular").removeClass("choose_topic_tab_unselected");
    $("#choose_topic_tab_all").addClass("choose_topic_tab_unselected");
    $("#choose_topic_tab_all").removeClass("choose_topic_tab_selected");
    $("#choose_topic_search_box").hide();
    $("#topic_container_popular").show();
    $("#topic_container_all").hide();
    $("#choose_topic_notes_popular").show();
    $("#choose_topic_notes_all").hide();
    ga("send", "event", "solver", "choose topic popular tab", "all")
});
$("#choose_topic_tab_all").on(g_button_trigger_event, function(a) {
    $("#choose_topic_tab_popular").removeClass("choose_topic_tab_selected");
    $("#choose_topic_tab_popular").addClass("choose_topic_tab_unselected");
    $("#choose_topic_tab_all").removeClass("choose_topic_tab_unselected");
    $("#choose_topic_tab_all").addClass("choose_topic_tab_selected");
    $("#choose_topic_search_box").show();
    $("#topic_container_popular").hide();
    $("#topic_container_all").show();
    $("#choose_topic_notes_popular").hide();
    $("#choose_topic_notes_all").show();
    if (!g_mobile_or_tablet) {
        $("#choose_topic_search_box").focus()
    }
    ga("send", "event", "solver", "choose topic all tab", "all")
});
$("#choose_topic_see_all").on("click", function(a) {
    $("#choose_topic_tab_all").trigger(g_button_trigger_event)
});
$("#skip_create_account_button").on(g_button_trigger_event, function(a) {
    ios_post_message({
        command: "skipCreateAccountButtonClicked"
    })
});

function update_create_account_bottom_area(b) {
    var a = app_version("iOS") >= "2.26";
    if (b && !a) {
        $("#skip_create_account_button").show()
    } else {
        $("#already_have_cymath_plus_message").show()
    }
}

function launch_payment_screen_plus() {
    if (!webview()) {
        return
    }
    $.ajax({
        url: "/ajax/manage_session.php?get_email_and_user_token",
        method: "GET",
        success: function(d) {
            var b;
            var a;
            if (d !== "error") {
                var c = d.split(g_long_delimiter);
                b = c[0];
                a = c[1]
            } else {
                b = "";
                a = ""
            }
            if (webview_android()) {
                if (webview_android_account_interface()) {
                    AndroidAccountInterface.launchPaymentScreenPlus(b, a)
                }
            } else {
                if (webview_ios()) {
                    ios_post_message({
                        command: "launchPaymentScreenPlus",
                        email: b,
                        userToken: a
                    })
                }
            }
        }
    })
}

function android_update_menu() {
    $.ajax({
        url: "/ajax/manage_session.php?get_is_logged_in",
        method: "GET",
        success: function(b) {
            var a = (b === "true");
            if (webview_android_main_interface() && typeof AndroidInterface.updateMenu === "function") {
                AndroidInterface.updateMenu(a)
            }
            if (webview_android_account_interface() && typeof AndroidAccountInterface.updateMenu === "function") {
                AndroidAccountInterface.updateMenu(a)
            }
        }
    })
}

function android_update_user_level() {
    if (!webview_android_main_interface()) {
        return
    }
    if (typeof AndroidInterface.setUserLevel !== "function") {
        return
    }
    $.ajax({
        url: "/ajax/manage_session.php?get_user_level",
        method: "GET",
        success: function(a) {
            var b = parseInt(a);
            AndroidInterface.setUserLevel(b)
        }
    })
}

function ios_update_menu() {
    $.ajax({
        url: "/ajax/manage_session.php?get_is_logged_in",
        method: "GET",
        success: function(a) {
            ios_post_message({
                command: "updateMenu",
                loggedIn: a
            })
        }
    })
}

function ios_update_user_level() {
    $.ajax({
        url: "/ajax/manage_session.php?get_user_level",
        method: "GET",
        success: function(a) {
            ios_post_message({
                command: "setUserLevel",
                level: a
            })
        }
    })
}

function ios_post_message(a) {
    if (window.webkit && window.webkit.messageHandlers) {
        window.webkit.messageHandlers.interOp.postMessage(a)
    }
}

function ios_log_requested_review() {}

function async_load_mobile_front_page_images() {
    $("#navigation_home").html("<img class='home_icon' src='/img/home_icon.png'/>");
    $("#k_pi").html("<img src='/img/pi.png' class='key_pi'/>");
    $("div.k_en_up").html("<img src='/img/up_arrow.png' class='k_en_up'/>");
    $("div.k_en_bksp").html("<img src='/img/backspace.png' class='k_en_bksp'/>");
    $("div.backspace_div").html("<img src='/img/backspace.png' class='backspace'/>")
}

function async_load_mobile_keyboards() {
    var a = "<img src='/img/solve_icon.svg' style=width:26px;height:26px;vertical-align:middle;/>";
    $("#keyboard_more").html("<div class='row_blank'>  <div></div></div><div class='row_blank'>  <div></div></div><div class='row_blank'>  <div></div></div><div class='row_main'>  <div id='k_sin' class='key_light'>sin</div>  <div id='k_cos' class='key_light'>cos</div>  <div id='k_tan' class='key_light'>tan</div>  <div id='k_ln' class='key_dark'>ln</div>  <div id='k_e' class='key_dark'>e</div>  <div id='k_comma' class='key_dark'>,</div></div><div class='row_main'>  <div id='k_csc' class='key_light'>csc</div>  <div id='k_sec' class='key_light'>sec</div>  <div id='k_cot' class='key_light'>cot</div>  <div id='k_log' class='key_dark'>log</div>  <div id='k_logx' class='key_dark'>log<sub>x</sub></div>  <div id='k_pct' class='key_dark'>%</div></div><div class='row_main'>  <div class='nav_more'><div class='nav_dots'>...</div></div>  <div class='nav_abc'>ABC</div>  <div id='k_inf' class='key_dark'>&infin;</div>  <div id='k_pi' class='key_dark'></div>  <div class='submit_solve' style='display:table-cell;width:33.4%;color:#fff;font-size:130%;background-color:#0B6'>    " + a + "  </div></div>");
    $("#keyboard_abc").html("<div class='row_blank'>  <div></div></div><div class='row_blank'>  <div></div></div><div class='row_eng'>  <div id='k_en_q'>q</div>  <div id='k_en_w'>w</div>  <div id='k_en_e'>e</div>  <div id='k_en_r'>r</div>  <div id='k_en_t'>t</div>  <div id='k_en_y'>y</div>  <div id='k_en_u'>u</div>  <div id='k_en_i'>i</div>  <div id='k_en_o'>o</div>  <div id='k_en_p'>p</div></div><div class='row_eng'>  <div style='width: 5%; visibility:hidden;'></div>  <div id='k_en_a'>a</div>  <div id='k_en_s'>s</div>  <div id='k_en_d'>d</div>  <div id='k_en_f'>f</div>  <div id='k_en_g'>g</div>  <div id='k_en_h'>h</div>  <div id='k_en_j'>j</div>  <div id='k_en_k'>k</div>  <div id='k_en_l'>l</div>  <div style='width:5%; visibility:hidden;'></div></div><div class='row_eng'>  <div style='width: 15%'><div class='k_en_up'></div></div>  <div id='k_en_z'>z</div>  <div id='k_en_x'>x</div>  <div id='k_en_c'>c</div>  <div id='k_en_v'>v</div>  <div id='k_en_b'>b</div>  <div id='k_en_n'>n</div>  <div id='k_en_m'>m</div>  <div style='width: 15%'><div class='k_en_up'></div></div></div><div class='row_main'>  <div class='nav_more'><div class='nav_dots'>...</div></div>  <div class='nav_abc'>ABC</div>  <div id='k_en_space'>space</div>  <div class='submit_solve' style='display:table-cell;width:33.4%;color:#fff;font-size:130%;background-color:#0B6'>    " + a + "  </div></div>")
}

function remove_hover_in_css() {
    try {
        for (var b in document.styleSheets) {
            var d = document.styleSheets[b];
            if (!d.rules) {
                continue
            }
            for (var a = d.rules.length - 1; a >= 0; a--) {
                if (!d.rules[a].selectorText) {
                    continue
                }
                if (d.rules[a].selectorText.match(":hover")) {
                    d.deleteRule(a)
                }
            }
        }
    } catch (c) {}
}
$("input.password").on("input", function(a) {
    if ($(this).val().length > 0) {
        $("#password_eye").show()
    } else {
        $("#password_eye").hide()
    }
});
$("#password_eye").on(g_button_trigger_event, function(f) {
    var d = $("input.password");
    var a = $("#password_eye_img");
    var c = (d.attr("type") == "password") ? "text" : "password";
    var b = (d.attr("type") == "password") ? "0.25" : "0.75";
    d.attr("type", c);
    a.css("opacity", b)
});
$("#account_box_web").ready(function() {
    $.getJSON("/ajax/get_account_box_web_info.php", function(a) {
        $("#credit_card_ending").html(a.credit_card_ending);
        $("#next_billing_amount").html(a.next_billing_amount)
    })
});
$("form.user_form").on("submit", function() {
    $("#sign_up_validate_user_info, #sign_up_check_conf_code, #join_and_pay_button, #update_payment_method_button, #email_change_validate_email, #email_change_check_conf_code, #sign_up_org_review_license_cost, #sign_up_org_account_info").removeClass("positive").addClass("loading").html("<img src='/img/loading.gif' class='loading_animation'/>").css("pointer-events", "none")
});
$("div.email_shortcut_box > div").on(g_button_trigger_event, function(b) {
    var c = $(this).text();
    var a = $("input.email").val() + c;
    $("input.email").val(a);
    $("div.email_shortcut_box").hide();
    ga("send", "event", "plus", "click email shortcut", "all")
});
$("input.email").on("focusin input", function(a) {
    var b = $(this).val();
    if (b.length > 0 && b.indexOf("@") == -1) {
        $("div.email_shortcut_box").show()
    } else {
        $("div.email_shortcut_box").hide()
    }
});
$("input.email").on("focusout", function(a) {
    window.setTimeout(function() {
        $("div.email_shortcut_box").hide()
    }, g_ui_delay)
});

function redirect_to_main_js() {
    if (webview()) {
        if (webview_android_account_interface()) {
            AndroidAccountInterface.closeAccount()
        }
        if (webview_android_solution_interface()) {
            AndroidAccountInterface.closeSolution()
        }
        ios_post_message({
            command: "closeAccount"
        });
        ios_post_message({
            command: "closeSolution"
        })
    }
    window.location.href = "/"
}

function log_out() {
    if (webview_android()) {
        if (typeof AndroidAccountInterface.logOutFacebook !== "undefined") {
            AndroidAccountInterface.logOutFacebook()
        }
        if (typeof AndroidAccountInterface.logOutGoogle !== "undefined") {
            AndroidAccountInterface.logOutGoogle()
        }
    } else {
        if (webview_ios()) {
            ios_post_message({
                command: "logOutFacebook"
            });
            ios_post_message({
                command: "logOutGoogle"
            })
        } else {
            oauth_google_log_out();
            oauth_facebook_log_out()
        }
    }
    $.get("/ajax/manage_session.php", {
        log_out: "1"
    }, function(a) {
        redirect_to_main_js()
    })
}

function ios_debug(a) {
    ios_post_message({
        command: "debug",
        message: a
    })
}
$("#ios_billing_button").on(g_button_trigger_event, function(a) {
    $("#subscription_info").hide();
    $("#subscription_loading").show();
    launch_payment_screen_plus()
});

function app_inc_num_good_calcs() {
    if (webview_ios()) {
        ios_post_message({
            command: "incNumGoodCalcs"
        })
    }
}

function log_in_as_guest(a, b) {
    $.ajax({
        type: "POST",
        url: "/ajax/manage_session.php",
        data: {
            log_in_as_guest: "1",
            guest_id: a
        },
        success: function(c) {
            if (c == "success") {
                b()
            }
        }
    })
}

function load_create_account_page() {
    window.location.href = make_lang_url("sign-up?create-account")
}

function enable_app_for_social_login_fix() {
    if (app_version("Android") >= "2.37") {
        return true
    }
    if (app_version("iOS") >= "2.24") {
        return true
    }
    return false
}

function includes(d, c) {
    return d.indexOf(c) !== -1
}

function load_url_without_history(a) {
    if (window.history && history.replaceState) {
        window.history.replaceState({}, document.title, a);
        history.go(0)
    } else {
        location.replace(a)
    }
}
$("#delete_mode_button").on(g_button_trigger_event, function(a) {
    $("div.delete_bookmark_button").toggle();
    if (!g_delete_mode) {
        $("#delete_mode_button_done").show();
        $("#delete_mode_button_edit").hide();
        g_delete_mode = true
    } else {
        $("#delete_mode_button_done").hide();
        $("#delete_mode_button_edit").show();
        g_delete_mode = false
    }
});
$("div.delete_bookmark_button").on(g_button_trigger_event, function(a) {
    var c = $(this).parent();
    var b = c.data("id");
    c.hide();
    $.ajax({
        url: "/ajax/manage_user_data.php?action=delete_bookmark_by_id&id=" + b,
        method: "GET",
        success: function(d) {
            if ($("div.bookmark_div:visible").length == 0) {
                location.reload()
            }
        }
    })
});
$("#bookmark_button").on(g_button_trigger_event, function(d) {
    var c = "";
    if ($(this).attr("src") == "/img/star_green.png") {
        $(this).attr("src", "/img/star.png");
        c = "delete_bookmark"
    } else {
        $(this).attr("src", "/img/star_green.png");
        c = "add_bookmark"
    }
    var b = $("#term_input").text();
    var a = encodeURIComponent(b);
    $.ajax({
        url: "/ajax/manage_user_data.php?action=" + c + "&q=" + a,
        method: "GET",
        success: function(e) {}
    })
});

function update_bookmark_indicator(a) {
    $.ajax({
        url: "/ajax/manage_user_data.php?action=is_bookmarked&q=" + a,
        method: "GET",
        success: function(b) {
            if (b == "success") {
                $("#bookmark_button").attr("src", "/img/star_green.png")
            } else {
                $("#bookmark_button").attr("src", "/img/star.png")
            }
        }
    })
}
$("div.history_bookmark_list > div").on("click", function(c) {
    if (g_delete_mode) {
        return
    }
    var a = $(this).data("q");
    var b = make_lang_url("answer?q=" + a);
    var d = webview() ? "_self" : "_blank";
    window.open(b, d)
});

function is_sign_up_page() {
    var a = window.location.pathname;
    return a.substr(a - 8) == "/sign-up"
}

function is_sign_up_group_license_page() {
    if (!is_sign_up_page()) {
        return false
    }
    if (window.location.href.indexOf("group-license") == -1) {
        return false
    }
    return true
}

function web_log_in_success_handler(a) {
    if (webview()) {
        if (is_sign_up_page() && enable_app_for_social_login_fix()) {
            var c = "";
            if (includes(a, "from account page")) {
                c = "account?create-account-complete"
            } else {
                c = "sign-up?billing"
            }
            var b = make_lang_url(c);
            window.location.href = b
        } else {
            if (webview_android()) {
                if (webview_android_account_interface()) {
                    AndroidAccountInterface.closeAccount()
                }
            }
            if (webview_ios()) {
                ios_post_message({
                    command: "closeAccount"
                })
            }
        }
    } else {
        if (is_sign_up_page()) {
            var b = "";
            if (is_sign_up_group_license_page()) {
                b = make_lang_url("sign-up?group-license&get-license-cost")
            } else {
                b = make_lang_url("sign-up?billing")
            }
            window.location.href = b
        } else {
            location.reload()
        }
    }
}
var googleUser = {};
var start_oauth_google_web = null;
if (!webview()) {
    start_oauth_google_web = function() {
        try {
            gapi.load("auth2", function() {
                auth2 = gapi.auth2.init({
                    client_id: "872746881782-tkv5ebspl6mltj95ivso0p009q9seu1m.apps.googleusercontent.com",
                    cookiepolicy: "single_host_origin"
                });
                attachSignin(document.getElementById("oauth_google_button"))
            })
        } catch (a) {}
    };
    start_oauth_google_web()
}

function attachSignin(a) {
    auth2.attachClickHandler(a, {}, function(b) {
        oauth_google_log_in_handler(b)
    }, function(b) {})
}

function oauth_google_log_in_handler(b) {
    var a = b.getAuthResponse().id_token;
    oauth_google_log_in_server_side(a)
}

function oauth_google_log_in_server_side(a) {
    $.ajax({
        type: "POST",
        url: "/ajax/manage_user_oauth_google.php",
        data: {
            token: a
        },
        success: function(b) {
            web_log_in_success_handler(b)
        },
        error: function(d, b, c) {}
    })
}

function oauth_google_log_out() {
    var a = gapi.auth2.getAuthInstance();
    if (a) {
        a.signOut().then(function() {
            a.disconnect()
        })
    }
}
$("#oauth_google_button").on(g_button_trigger_event, function(a) {
    if (webview_android()) {
        if (webview_android_account_interface()) {
            AndroidAccountInterface.logInGoogle()
        }
    }
    if (webview_ios()) {
        ios_post_message({
            command: "logInGoogle"
        })
    }
});
window.fbAsyncInit = function() {
    FB.init({
        appId: "525411901595262",
        cookie: true,
        version: "v2.2"
    })
};
(function(e, a, f) {
    var c, b = e.getElementsByTagName(a)[0];
    if (e.getElementById(f)) {
        return
    }
    c = e.createElement(a);
    c.id = f;
    c.src = "https://connect.facebook.net/en_US/sdk.js";
    b.parentNode.insertBefore(c, b)
}(document, "script", "facebook-jssdk"));
$("#oauth_facebook_button").on(g_button_trigger_event, function(a) {
    if (!webview()) {
        FB.login(function(b) {
            if (b.status === "connected") {
                oauth_facebook_status_change_callback(b)
            }
        }, {
            scope: "public_profile,email"
        })
    }
});

function oauth_facebook_status_change_callback(a) {
    var b = a.authResponse.accessToken;
    if (a.status !== "connected") {
        return
    }
    FB.api("/me?fields=name,email", function(c) {
        oauth_facebook_log_in_server_side(b)
    })
}

function oauth_facebook_log_in_server_side(a) {
    $.ajax({
        type: "POST",
        url: "/ajax/manage_user_oauth_facebook.php",
        data: {
            token: a
        },
        success: function(b) {
            web_log_in_success_handler(b)
        },
        error: function(d, b, c) {}
    })
}
$("#oauth_facebook_button").on(g_button_trigger_event, function(a) {
    if (webview_android()) {
        if (webview_android_account_interface()) {
            AndroidAccountInterface.logInFacebook()
        }
    }
    if (webview_ios()) {
        ios_post_message({
            command: "logInFacebook"
        })
    }
});

function oauth_facebook_log_out() {
    FB.logout()
}

function method_name_to_label_id(a) {
    var b = replace_all(" ", "_", a.replace("? ", "").toLowerCase());
    switch (b) {
        case "expand":
            return "expand (ui)";
        case "simplify":
            return "simplify (ui)";
        case "complete_the_square":
            return "complete_the_square (ui)"
    }
    return b
}

function sendTouchEvent(b, f, e, d) {
    const c = new Touch({
        identifier: Date.now(),
        target: e,
        clientX: b,
        clientY: f,
        radiusX: 2.5,
        radiusY: 2.5,
        rotationAngle: 10,
        force: 0.5
    });
    const a = new TouchEvent(d, {
        cancelable: true,
        bubbles: true,
        touches: [c],
        targetTouches: [],
        changedTouches: [c],
        shiftKey: true
    });
    e.dispatchEvent(a)
}
$("#clear_button_div").on(g_button_trigger_event, function(a) {
    g_topic = "";
    $("#choose_topic_button_mobile").html("<span style='float: left;'>" + label("choose_topic") + "</span>");
    $("#clear_button_div").html("");
    set_latex("")
});

function choose_method(b) {
    var a = method_name_to_label_id(b);
    g_topic = b;
    $("#choose_topic_button_mobile").html("<span id='topic_name'>" + label(a) + "</span><img id='edit_icon' src='/img/edit.svg'/>");
    $("#clear_button_div").html("<img id='clear_button' src='/img/clear_button.svg'/>");
    update_example()
}

function focus_input() {
    const a = document.getElementsByClassName("mq-math-mode")[0];
    sendTouchEvent(0, 0, a, g_button_trigger_event)
}

function topic_name_to_example(b) {
    if (b == "") {
        return "2x+5=9"
    }
    var a = g_autocomp_methods.length;
    for (i = 0; i < a; i++) {
        var c = g_autocomp_methods[i].name.trim();
        if (c.toLowerCase() == b.toLowerCase()) {
            var d = g_autocomp_methods[i].snippet;
            return d
        }
    }
    return ""
}

function update_example() {
    var a = topic_name_to_example(g_topic);
    katex.render(a, example_katex, {
        throwOnError: false
    })
}
$("#example_box").on(g_button_trigger_event, function(c) {
    $("#input_placeholder").hide();
    $("#example_box").hide();
    var a = g_topic;
    var b = topic_name_to_example(a);
    b = b.replace(/\\;/g, "");
    set_latex(b);
    get_solution()
});

function set_latex(a) {
    window.MathWrapper.setContent(a);
    window.MathInput.props.value = a;
    window.MathInput._hideCursorHandle();
    update_math_input_box();
    update_example()
}

function update_math_input_box() {
    var a = window.MathWrapper.getContent();
    if (window.localStorage) {
        localStorage.setItem("back_q", a)
    }
    if (a == "") {
        $("#example_box").show();
        $("#input_placeholder").show()
    } else {
        $("#example_box").hide();
        $("#input_placeholder").hide()
    }
    update_comma_for_math_input_box();
    adjust_font_size()
}

function get_latex_input(){
	console.log(window.MathWrapper.getContent());
}

function adjust_font_size() {
    var c = $("span.mq-root-block span:last");
    var b = c.position().left + c.outerWidth();
    var d = $("span.mq-root-block").width();
    if (b > d) {
        $("span.mq-root-block").css("position", "relative");
        var a = $("span.mq-root-block").css("font-size");
        switch (a) {
            case "24px":
                $("span.mq-root-block").css("font-size", "16px");
                $("span.mq-root-block").css("top", "2px");
                break;
            case "16px":
                $("span.mq-root-block").css("font-size", "12px");
                $("span.mq-root-block").css("top", "3px");
                break;
            default:
                break
        }
    }
    if (b < d / 2) {
        $("span.mq-root-block").css("position", "relative");
        $("span.mq-root-block").css("font-size", "24px");
        $("span.mq-root-block").css("top", "0px")
    }
}

function update_comma_for_math_input_box() {
    $("span.mq-root-block > span").each(function() {
        if ($(this).text() == ",") {
            $(this).addClass("mq-comma")
        }
    })
}

function replace_char(c, a, b) {
    if (a > c.length - 1) {
        return c
    }
    return c.substr(0, a) + b + c.substr(a + 1)
}

function insert_char(c, a, b) {
    if (a > c.length - 1) {
        return c
    }
    return c.substr(0, a) + b + c.substr(a)
}

function fix_latex(a) {
    a = fix_latex_left_right_brackets(a);
    a = fix_latex_trig(a);
    a = fix_latex_log(a);
    return a
}

function fix_latex_left_right_brackets(a) {
    return a.replace(/\\left\(/g, "(").replace(/\\right\)/g, ")")
}

function fix_latex_trig(f) {
    var c = ["sin", "cos", "tan", "cot", "csc", "sec"];
    var b = c.length;
    for (var e = 0; e < b; e++) {
        var a = "\\" + c[e] + "(";
        while (true) {
            var h = f.indexOf(a);
            if (h != -1) {
                var d = h + a.length - 1;
                var g = find_closing_bracket(f, d + 1);
                f = replace_char(f, d, "{");
                f = replace_char(f, g, "}")
            } else {
                break
            }
        }
    }
    return f
}

function fix_latex_log(d) {
    var c = "\\log_";
    var f = 0;
    while (true) {
        var g = d.indexOf(c, f);
        if (g != -1) {
            f = g + 1;
            var b = (d[g + c.length + 1] == "(");
            var a;
            var e;
            if (b) {
                a = g + c.length + 1;
                e = find_closing_bracket(d, a + 1)
            } else {
                a = d.indexOf("}") + 1;
                if (d[a] != "(") {
                    continue
                }
                e = find_closing_bracket(d, a + 1);
                if (e == -1) {
                    continue
                }
            }
            d = replace_char(d, a, "{");
            d = replace_char(d, e, "}");
            if (b) {
                open_brace = g + c.length;
                d = insert_char(d, open_brace, "{");
                close_brace = g + c.length + 2;
                d = insert_char(d, close_brace, "}")
            }
        } else {
            break
        }
    }
    return d
}

function find_closing_bracket(d, e) {
    var a = d.length;
    var c = 0;
    for (var b = e; b < a; b++) {
        if (d[b] == ")" && c == 0) {
            return b
        }
        if (d[b] == "(") {
            c++
        }
        if (d[b] == ")") {
            c--
        }
    }
    return -1
}

function get_solution() {
    var e = $("#choose_topic_button_mobile").html().indexOf("list_icon") == -1;
    var c = e ? g_topic.toLowerCase() : "";
    var d = window.MathWrapper.getContent();
    q = fix_latex(d);
    if (webview_android_main_interface()) {
        AndroidInterface.getSolutionInLatex(q, c)
    } else {
        if (webview_ios()) {
            ios_post_message({
                command: "getSolution",
                q: q,
                latex: "true",
                topic: c
            })
        } else {
            var a = encodeURIComponent(q);
            if (c) {
                var f = encodeURIComponent(c);
                a += "&topic=" + f
            }
            var b = make_lang_url("answer?latex&q=" + a);
            if (window.localStorage) {
                localStorage.setItem("back_q", d);
                localStorage.setItem("back_topic", c)
            }
            window.location.href = b
        }
    }
}

function handle_back() {
    var b = "";
    var a = "";
    var e = get_edit_q_from_app_interface();
    if (e !== null) {
        b = e
    } else {
        if (window.localStorage) {
            b = get_back_q_from_local_storage();
            a = localStorage.getItem("back_topic")
        }
    }
    if (b) {
        if (a) {
            g_topic = a;
            var d = label(method_name_to_label_id(a));
            $("#choose_topic_button_mobile").html("<span id='topic_name'>" + d + "</span><img id='edit_icon' src='/img/edit.svg'/>");
            $("#clear_button_div").html("<img id='clear_button' src='/img/clear_button.svg'/>")
        }
        $("#input_placeholder").hide();
        $("#example_box").hide();
        set_latex(b);
        for (var c = 0; c < 2; c++) {
            adjust_font_size()
        }
    }
}

function pushstate_choose_topic() {
    if (window.history && window.history.pushState) {
        history.replaceState("choose_topic_launched", null, "");
        history.pushState("choose_topic_launched", null, "")
    }
}
if (window.history && window.history.pushState) {
    $(window).on("popstate", function(a) {
        if (a.originalEvent.state === "choose_topic_launched") {
            hide_choose_topic_popup();
            return
        }
    })
};